// <auto-generated />
using System;
using DSTest.Infrastructure.Dal.Repositories.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DSTest.Infrastructure.Migrations
{
    [DbContext(typeof(DsTestContext))]
    partial class DsTestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.1.23111.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DSTest.Domain.Entities.WeatherEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("AirHumidity")
                        .HasColumnType("smallint")
                        .HasColumnName("AirHumidity");

                    b.Property<short>("AtmospherePressure")
                        .HasColumnType("smallint")
                        .HasColumnName("AtmospherePressure");

                    b.Property<short>("Cloudiness")
                        .HasColumnType("smallint")
                        .HasColumnName("Cloudiness");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<short>("Height")
                        .HasColumnType("smallint")
                        .HasColumnName("Height");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RecordedAt");

                    b.Property<float>("Temperature")
                        .HasColumnType("real")
                        .HasColumnName("Temperature");

                    b.Property<float>("TemperatureDelta")
                        .HasColumnType("real")
                        .HasColumnName("TemperatureDelta");

                    b.Property<short>("Vv")
                        .HasColumnType("smallint")
                        .HasColumnName("Vv");

                    b.Property<string>("WeatherConditions")
                        .HasColumnType("text")
                        .HasColumnName("WeatherConditions");

                    b.Property<string>("WindDirection")
                        .HasColumnType("text")
                        .HasColumnName("WindDirection");

                    b.Property<short>("WindSpeed")
                        .HasColumnType("smallint")
                        .HasColumnName("WindSpeed");

                    b.HasKey("Id");

                    b.ToTable("Weather");
                });
#pragma warning restore 612, 618
        }
    }
}
